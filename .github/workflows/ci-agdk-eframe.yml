name: ci-agdk-cargo-apk

on:
  push:
  pull_request:

env:
  CARGO_INCREMENTAL: 0
jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        rust_version: [stable]
        cargo_apk_args: [-t arm64-v8a -o app/src/main/jniLibs/]
        cargo_ndk_args: [-t arm64-v8a -o app/src/main/jniLibs/]
    steps:
      - uses: actions/checkout@v3

      - name: Create directories
        run: mkdir -p ${{ github.workspace }}/agdk-eframe/app/src/main/jniLibs/arm64-v8a/

      # - uses: actions/download-artifact@v3
      #   with:
      #     name: my-artifact
      #     path: ${{ github.workspace }}/gstreamer-android/
          
      # - name: Display structure of downloaded files
      #   run: ls -R
      #   working-directory: ${{ github.workspace }}/gstreamer-android/          

      - uses: hecrj/setup-rust-action@v1
        with:
          rust-version: ${{ matrix.rust_version }}
          
      - name: Download *.so
        run: |
          wget -O ${{ github.workspace }}/agdk-eframe/app/src/main/jniLibs/arm64-v8a/libc++_shared.so https://github.com/drunkod/rust-android-examples/releases/download/minimal/libc++_shared.so
          wget -O ${{ github.workspace }}/agdk-eframe/app/src/main/jniLibs/arm64-v8a/libgstreamer_android.so https://github.com/drunkod/rust-android-examples/releases/download/minimal/libgstreamer_android.so      
      
      - name: List files
        run: ls -R ${{ github.workspace }}/agdk-eframe/app/src/main/jniLibs/arm64-v8a/

      - name: Install Gstreamer dependencies
        run: |
          # Create a new file in the sources.list.d directory
          echo "deb [arch=amd64] http://archive.ubuntu.com/ubuntu/ jammy main restricted
          deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports/ jammy main restricted
          
          deb [arch=amd64] http://archive.ubuntu.com/ubuntu/ jammy-updates main restricted
          deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports/ jammy-updates main restricted
          
          deb [arch=amd64] http://archive.ubuntu.com/ubuntu/ jammy universe
          deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports/ jammy universe
          
          deb [arch=amd64] http://archive.ubuntu.com/ubuntu/ jammy-updates universe
          deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports/ jammy-updates universe
          
          deb [arch=amd64] http://archive.ubuntu.com/ubuntu/ jammy multiverse
          deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports/ jammy multiverse
          
          deb [arch=amd64] http://archive.ubuntu.com/ubuntu/ jammy-updates multiverse
          deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports/ jammy-updates multiverse
          
          deb [arch=amd64] http://archive.ubuntu.com/ubuntu/ jammy-backports main restricted universe multiverse
          deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports/ jammy-backports main restricted universe multiverse
          
          deb [arch=amd64] http://security.ubuntu.com/ubuntu/ jammy-security main restricted
          deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports/ jammy-security main restricted
          
          deb [arch=amd64] http://security.ubuntu.com/ubuntu/ jammy-security universe
          deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports/ jammy-security universe
          
          deb [arch=amd64] http://security.ubuntu.com/ubuntu/ jammy-security multiverse
          deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports/ jammy-security multiverse" | sudo tee /etc/apt/sources.list.d/my_sources.list
          sudo apt-get -y update && sudo apt-get -y upgrade
          sudo apt-get -y install build-essential cmake freeglut3-dev gdb iputils-ping libgl1-mesa-dev \
          libglu1-mesa-dev libjpeg-dev libmysqlclient-dev libnss3-dev libopus-dev \
          libpng-dev libsqlite3-dev libssl-dev libx11-xcb-dev libxcb-xinerama0-dev \
          libxcb-xkb-dev libxcb1-dev libxcursor-dev libxi-dev libxml2-dev libxrender-dev \
          libxslt-dev lzip mesa-common-dev nano perl python3 valgrind wget zlib1g-dev \
          '^libxcb.*-dev' libxkbcommon-dev libxkbcommon-x11-dev wget libwayland-dev ninja-build && \
          sudo apt-get -y install flex bison gperf libicu-dev libxslt-dev ruby && \
          sudo apt-get -y install libxcursor-dev libxcomposite-dev libxdamage-dev libxrandr-dev \
          libxtst-dev libxss-dev libdbus-1-dev libevent-dev libfontconfig1-dev \
          libcap-dev libpulse-dev libudev-dev libpci-dev libnss3-dev libasound2-dev
          echo " SSSSSSSSStep 50 "
          # libunwind-dev fix libunwind-14-dev libunwind-dev
          sudo apt-get -y install libunwind-15-dev
          sudo apt-get -y install libasound2-dev libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev libgstreamer-plugins-good1.0-dev libgstreamer-plugins-bad1.0-dev \
          libcups2-dev libavformat58 libavcodec58 libavutil56 libswresample3 libswscale5 libavdevice58 \
          libmng2 libwebp7 libxcb-xinput0 libwebpmux3 libvpx7 libzstd1 libpcre2-16-0 libxshmfence1 libclang1
          sudo apt-get install -y \
          python3-dev python3-distro python3-setuptools python3-pip \
          autotools-dev automake autoconf autopoint \
          libtool \
          g++ \
          make cmake pkg-config \
          bison \
          flex \
          nasm \
          libxv-dev \
          libx11-dev \
          libx11-xcb-dev \
          libpulse-dev \
          gettext \
          libxext-dev \
          libxi-dev \
          x11proto-record-dev \
          libxrender-dev \
          libgl1-mesa-dev \
          libxfixes-dev \
          libxdamage-dev \
          libxcomposite-dev \
          libasound2-dev \
          build-essential \
          gperf \
          wget \
          libxtst-dev \
          libxrandr-dev \
          libglu1-mesa-dev \
          libegl1-mesa-dev \
          git \
          xutils-dev \
          intltool \
          ccache \
          libssl-dev \
          libjson-glib-1.0-0 \
          libjson-glib-dev
        
      - name: Install Rust targets
        run: >
          rustup target add
          aarch64-linux-android

      - name: Install cargo-apk
        run: cargo install cargo-apk

      - name: Install gtk3-dev
        run: sudo apt-get install libgtk-3-dev
      
      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v2

      - name: Setup shared Cargo target
        # Each example is in a separate workspace but we want to use
        # a shared target to speed up builds of all examples
        run: mkdir shared-target

      - name: Build agdk-eframe example
        working-directory: agdk-eframe
        run: >
          #  add rustflags = ["-C", "link-args=-lunwind"]
          CARGO_TARGET_DIR=$GITHUB_WORKSPACE/shared-target cargo ndk ${{ matrix.cargo_ndk_args }} build &&
          # PKG_CONFIG_ALLOW_CROSS=1 RUSTFLAGS="-lffi -C link-args=-lunwind" CARGO_TARGET_DIR=$GITHUB_WORKSPACE/shared-target cargo apk build &&
          ./gradlew build &&
          find $GITHUB_WORKSPACE/shared-target -iname '*.so' -exec rm {} \;
          
      - name: Display structure of downloaded files
        run: ls -R
        working-directory: agdk-eframe/app/build/outputs/apk/debug  

      # We don't currently build the OpenXR examples on Android because I
      # haven't found a nice nice way to pull in libopenxr_loader binaries that
      # we can link against. Normally I would use the binaries as part of the
      # Oculus SDK
      #
      # TODO: maybe we can look at using the 'prefab' `.aar`s from Khronos here:
      # https://search.maven.org/artifact/org.khronos.openxr/openxr_loader_for_android
      #
      #- name: Build na-openxr-info example
      #  working-directory: na-openxr-info
      #  run: >
      #    CARGO_TARGET_DIR=$GITHUB_WORKSPACE/shared-target cargo apk ${{ matrix.cargo_apk_args }} build --features=android &&
      #    ./gradlew build &&
      #    find $GITHUB_WORKSPACE/shared-target -iname '*.so' -exec rm {} \;

      #- name: Build na-openxr-wgpu
      #  working-directory: na-openxr-wgpu
      #  run: >
      #    CARGO_TARGET_DIR=$GITHUB_WORKSPACE/shared-target cargo apk ${{ matrix.cargo_apk_args }} build &&
      #    ./gradlew build &&
      #    find $GITHUB_WORKSPACE/shared-target -iname '*.so' -exec rm {} \;
      #- name: Build na-mainloop example
      #   working-directory: na-mainloop
      #   run: >
      #     CARGO_TARGET_DIR=$GITHUB_WORKSPACE/shared-target cargo apk ${{ matrix.cargo_apk_args }} build &&
      #     ./gradlew build &&
      #     find $GITHUB_WORKSPACE/shared-target -iname '*.so' -exec rm {} \;

      # - name: Build agdk-mainloop example
      #   working-directory: agdk-mainloop
      #   run: >
      #     CARGO_TARGET_DIR=$GITHUB_WORKSPACE/shared-target cargo apk ${{ matrix.cargo_apk_args }} build &&
      #     ./gradlew build &&
      #     find $GITHUB_WORKSPACE/shared-target -iname '*.so' -exec rm {} \;

      # - name: Build na-subclass-jni
      #   working-directory: na-subclass-jni
      #   run: >
      #     CARGO_TARGET_DIR=$GITHUB_WORKSPACE/shared-target cargo apk ${{ matrix.cargo_apk_args }} build &&
      #     ./gradlew build &&
      #     find $GITHUB_WORKSPACE/shared-target -iname '*.so' -exec rm {} \;

      # - name: Build na-winit-wgpu
      #   working-directory: na-winit-wgpu
      #   run: >
      #     CARGO_TARGET_DIR=$GITHUB_WORKSPACE/shared-target cargo apk ${{ matrix.cargo_apk_args }} build &&
      #     ./gradlew build &&
      #     find $GITHUB_WORKSPACE/shared-target -iname '*.so' -exec rm {} \;

      # - name: Build na-winit-glutin
      #   working-directory: na-winit-glutin
      #   run: >
      #     CARGO_TARGET_DIR=$GITHUB_WORKSPACE/shared-target cargo apk ${{ matrix.cargo_apk_args }} build &&
      #     ./gradlew build &&
      #     find $GITHUB_WORKSPACE/shared-target -iname '*.so' -exec rm {} \;

      # - name: Build agdk-winit-glutin
      #   working-directory: na-winit-glutin
      #   run: >
      #     CARGO_TARGET_DIR=$GITHUB_WORKSPACE/shared-target cargo apk ${{ matrix.cargo_apk_args }} build &&
      #     ./gradlew build &&
      #     find $GITHUB_WORKSPACE/shared-target -iname '*.so' -exec rm {} \;

      # - name: Build agdk-cpal
      #   working-directory: agdk-cpal
      #   run: >
      #     CARGO_TARGET_DIR=$GITHUB_WORKSPACE/shared-target cargo apk ${{ matrix.cargo_apk_args }} build &&
      #     ./gradlew build &&
      #     find $GITHUB_WORKSPACE/shared-target -iname '*.so' -exec rm {} \;

      # - name: Build agdk-oboe
      #   working-directory: agdk-oboe
      #   run: >
      #     CARGO_TARGET_DIR=$GITHUB_WORKSPACE/shared-target cargo apk ${{ matrix.cargo_apk_args }} build &&
      #     ./gradlew build &&
      #     find $GITHUB_WORKSPACE/shared-target -iname '*.so' -exec rm {} \;

      # - name: Build na-egui example
      #   working-directory: na-egui
      #   run: >
      #     CARGO_TARGET_DIR=$GITHUB_WORKSPACE/shared-target cargo apk ${{ matrix.cargo_apk_args }} build &&
      #     ./gradlew build &&
      #     find $GITHUB_WORKSPACE/shared-target -iname '*.so' -exec rm {} \;

      # - name: Build agdk-egui example
      #   working-directory: agdk-egui
      #   run: >
      #     CARGO_TARGET_DIR=$GITHUB_WORKSPACE/shared-target cargo apk ${{ matrix.cargo_apk_args }} build &&
      #     ./gradlew build &&
      #     find $GITHUB_WORKSPACE/shared-target -iname '*.so' -exec rm {} \;


  format:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: rustfmt

      - name: Format
        run: |
          for dir in agdk-* na-*; do
            cd $GITHUB_WORKSPACE/$dir
            cargo fmt --all -- --check
          done
