name: Custom_Docker_Run_Action

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v3
        with:
          node-version: '14'
      - run: mkdir -p /app && cd /app && npm init -y && npm i telegram
      - name: Write session to file
        env:
          TLG_SESSION: ${{ secrets.TLG_SESSION }}
          APIHASH: ${{ secrets.APIHASH }}
          APIID: ${{ secrets.APIID }}
        run: |
          # Create a new file in the sources.list.d directory
          echo "const { TelegramClient } = require("telegram");
          const { StringSession } = require("telegram/sessions");
          const input = require("input"); // npm i input
          
          const apiId = $APIID;
          const apiHash = "$APIHASH";
          const stringSession = new StringSession("$APP_SESSION"); // fill this later with the value from session.save()
          
          (async () => {
            console.log("Loading interactive example...");
            const client = new TelegramClient(stringSession, apiId, apiHash, {
              connectionRetries: 5,
            });
            await client.start({
              phoneNumber: async () => await input.text("Please enter your number: "),
              password: async () => await input.text("Please enter your password: "),
              phoneCode: async () =>
                await input.text("Please enter the code you received: "),
              onError: (err) => console.log(err),
            });
            console.log("You should now be connected.");
            console.log(client.session.save()); // Save this string to avoid logging in again
            await client.sendMessage("me", { message: "Hello!" });
          })();" | sudo tee /app/main.js          
          cat /app/main.js 
      - name: run docker
        run: |
          node /app/main.js 
    # /app:
    # telegram_upload
    
    # /app/telegram_upload:
    # __init__.py
    # _compat.py
    # client.py
    # config.py
    # exceptions.py
    # files.py
    # management.py
    # utils.py
    # video.py        
