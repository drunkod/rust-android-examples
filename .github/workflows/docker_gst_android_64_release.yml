name: Custom_Docker_Run_Action

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v3
        with:
          node-version: '14'
      - name: Setup app directory
        run: |
          mkdir -p ${{ github.workspace }}/app
          cd ${{ github.workspace }}/app
          npm init -y
          npm i telegram input crypto
      - name: Write session to file
        env:
          TLG_SESSION: ${{ secrets.TLG_SESSION }}
          APIHASH: ${{ secrets.APIHASH }}
          APIID: ${{ secrets.APIID }}
        run: |
          # Create a new file in the sources.list.d directory
          echo 'const { TelegramClient } = require("telegram");
          const { StringSession } = require("telegram/sessions");
          const input = require("input"); // npm i input
          const fs = require("fs");
          const path = require("path");
          const crypto = require("crypto");
          
          const apiId = ${APIID};
          const apiHash = "${APIHASH}";
          const stringSession = new StringSession("${TLG_SESSION}"); // fill this later with the value from session.save()
          
          (async () => {
            console.log("Loading interactive example...");
            const client = new TelegramClient(stringSession, apiId, apiHash, {
              connectionRetries: 5,
            });
            
            // await client.start({
            //   phoneNumber: async () => await input.text("Please enter your number: "),
            //   password: async () => await input.text("Please enter your password: "),
            //   phoneCode: async () =>
            //     await input.text("Please enter the code you received: "),
            //   onError: (err) => console.log(err),
            // });
            await client.connect(); // This assumes you have already authenticated with .start()
            const filePath = `${{ github.workspace }}/app/text.txt`
            const fileData = fs.readFileSync(filePath);
            if (fs.existsSync(filePath)) {
                await client.sendMessage("me", { message: "Hello! Файл существует" });
                console.log("Файл существует");
            } else {
                await client.sendMessage("me", { message: "Hello! Файл не существует" });
                console.log("Файл не существует");
            }
            

            // generate a random integer
            const randomInt = crypto.randomInt(Number.MAX_SAFE_INTEGER);
            
            // convert to BigInt
            const fileId = BigInt(randomInt);
            const chunkSize = 1024 * 1024; // size of each chunk (1MB in this case)
            const totalParts = Math.ceil(fileData.length / chunkSize);
            for (let i = 0; i < totalParts; i++) {
            const start = i * chunkSize;
            const end = Math.min(fileData.length, (i + 1) * chunkSize);
            const chunk = fileData.slice(start, end);
            
            const result = await client.invoke(
              new Api.upload.SaveBigFilePart({
                fileId,
                filePart: i,
                fileTotalParts: totalParts,
                bytes: chunk,
              })
            );
          
            console.log(`Uploaded part ${i + 1} of ${totalParts}`);
            }
            console.log("You should now be connected.");
            console.log(client.session.save()); // Save this string to avoid logging in again
            await client.sendMessage("me", { message: "Hello!234567" });
          })();' | sudo tee ${{ github.workspace }}/app/main.js          
          cat ${{ github.workspace }}/app/main.js 
      - name: run docker
        run: |
          node ${{ github.workspace }}/app/main.js 
    # /app:
    # telegram_upload
    
    # /app/telegram_upload:
    # __init__.py
    # _compat.py
    # client.py
    # config.py
    # exceptions.py
    # files.py
    # management.py
    # utils.py
    # video.py        
